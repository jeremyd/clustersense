#!/bin/bash -e
#
## This script facilitates building for ec2
#

# Hack for jruby doesn't like to output STDERR
#logfile=/dev/stdout
#exec > $logfile 2>&1

if [ -z "$DEST_DIR" ]; then
  echo "you MUST set the environment variable DEST_DIR to the location of the image's filesystem."
  exit 1
fi

mkdir -p $DEST_DIR
cd $DEST_DIR

# TODO: add in lsb-release utilities (Linux Standard Base)
# TODO: add build tools?  autoconf
if ! arch-chroot $DEST_DIR pacman -Q linux-ec2; then
pacstrap -M -G -d $DEST_DIR base base-devel openssh vim openjdk6 wget curl util-linux xfsprogs jfsutils e2fsprogs btrfs-progs git subversion zsh inetutils iproute2 iputils net-tools zlib netcfg pacmatic grub-bios grub-common dhclient rsyslog python2 python2-yaml python2-configobj python2-distribute sudo tmux arch-install-scripts
fi

cat <<EOM> $DEST_DIR/etc/pacman.d/mirrorlist
Server = http://mirrors.kernel.org/archlinux/\$repo/os/\$arch
EOM

#cat <<EOP> $DEST_DIR/etc/pacman.conf
#HoldPkg     = pacman glibc
#SyncFirst   = pacman
#Architecture = auto

# pv-grub's menu.lst
mkdir -p $DEST_DIR/boot/grub
cat <<EOF> $DEST_DIR/boot/grub/menu.lst
# This file is only used on paravirtualized instances.
timeout 1
default 0
color   light-blue/black light-cyan/blue
title  Arch Linux
root   (hd0)
kernel /boot/vmlinuz-linux-ec2 root=/dev/xvda1 ro rootwait rootfstype=ext4 nomodeset console=hvc0 earlyprintk=xen,verbose loglevel=7
initrd /boot/initramfs-linux-ec2.img
EOF

# fstab generation
cat <<EOFS> $DEST_DIR/etc/fstab
# Generated
tmpfs   /tmp  tmpfs nodev,nosuid  0 0
/dev/xvda1 /          ext4        rw,relatime,data=ordered  0 2
EOFS

# Networking: setup DHCP
cat <<EONET> $DEST_DIR/etc/network.d/eth0
CONNECTION='ethernet'
HOSTNAME=''
INTERFACE='eth0'
IP='dhcp'
DHCLIENT='yes'
EONET

cat <<EON> $DEST_DIR/etc/conf.d/netcfg
NETWORKS=(eth0)
WIRED_INTERFACE="eth0"
EON

# DEVMODE: inject an SSH authorized_key
if [ -n "$SSH_AUTHORIZED_KEY_DEV" ]; then
  echo "using dev key $SSH_AUTHORIZED_KEY_DEV"
  mkdir -p $DEST_DIR/root/.ssh
  cat <<EOSSH> $DEST_DIR/root/.ssh/authorized_keys
$SSH_AUTHORIZED_KEY_DEV
EOSSH
  chmod 600 $DEST_DIR/root/.ssh/authorized_keys
fi

# LOCALE config
cat <<ELOCALE> $DEST_DIR/etc/locale.conf
LANG="en_US.UTF-8"
ELOCALE

cat <<ELGEN> $DEST_DIR/etc/locale.gen
en_AU.UTF-8 UTF-8
en_DK.UTF-8 UTF-8
en_US.UTF-8 UTF-8
ELGEN

# SSHd config
cat <<EOSSH> $DEST_DIR/etc/ssh/sshd_config
#Protocol 2
RSAAuthentication yes
PubkeyAuthentication yes
PermitRootLogin yes
PermitEmptyPasswords no
AuthorizedKeysFile .ssh/authorized_keys
PasswordAuthentication no
ChallengeResponseAuthentication no
UsePrivilegeSeparation sandbox
UsePAM yes
Subsystem sftp  /usr/lib/ssh/sftp-server
EOSSH

#
## The chroot script does the rest of the tweaks
cat <<EOA> $DEST_DIR/arch_chroot_script.sh
#!/bin/bash -ex

#
## This chroot script was used to finish the archlinux installation.
#

pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm

# Can not use systemctl here because it's not allowed inside a chroot.
# ARG 1 is the name of the service, ie: sshd.service
# ARG 2 (optional) path to systemd service file
function enableservice {
  if [ -n "\$2" ]; then
    usepath=\$2
  else
    usepath=/usr/lib/systemd/system
  fi
  if [ ! -f /etc/systemd/system/multi-user.target.wants/\$1 ]; then
    ln -s \$usepath/\$1 /etc/systemd/system/multi-user.target.wants/\$1 ||true
  else
    echo "skipping enabling the service \$1 because it's already enabled."
  fi
}

# drop in some AUR package(s)

MK_PKG_OPTS="--syncdeps --install --asroot --noconfirm --noprogressbar"
AUR_PATH="/aur"

# ARG 1 is name of aur package to make and install
# ARG 2 is url of PKGBUILD tarball
function aurinst {
  mkdir -p \$AUR_PATH
  cd \$AUR_PATH
  if pacman -Q \$1; then
    echo package already installed: \$1.  skipping makepkg.
  else
    curl \$2 -o \$1.tar.gz
    tar -xzvf \$1.tar.gz
    cd \$1
    makepkg \$MK_PKG_OPTS
    cd ..
  fi
}

# linux-ec2 kernel 
export MAKEFLAGS=-j8
if pacman -Q linux; then
  echo removing linux package so we can install linux-ec2
  pacman -R --noconfirm linux
fi
aurinst linux-ec2

# packer an AUR helper
aurinst packer

# ec2 tools
#aurinst ec2-ami-tools
aurinst ec2-api-tools

# cloud-init deps
aurinst python2-cheetah
aurinst python2-prettytable
aurinst python2-oauth2
aurinst python2-boto
aurinst python2-argparse

# cloud-init drop-in
if pacman -Q cloud-init; then
  echo cloud-init already installed, skipping.
else
  if [ ! -d cloud-init-bzr ]; then
    git clone git://gist.github.com/3970933.git cloud-init-bzr
    cd cloud-init-bzr
  else
    cd cloud-init-bzr
    git pull
  fi
  makepkg \$MK_PKG_OPTS
  cd ..
fi

# Enable the necessary services.
enableservice netcfg.service
enableservice sshd.service
enableservice sshdgenkeys.service
enableservice syslog-ng.service
enableservice cloud-init.service /etc/systemd/system
enableservice cloud-config.service /etc/systemd/system
enableservice cloud-final.service /etc/systemd/system

# generate locale, setup timezone to UTC.
locale-gen
if [ ! -f /etc/localtime ]; then
  ln -s /usr/share/zoneinfo/UTC /etc/localtime
fi

EOA

chmod +x $DEST_DIR/arch_chroot_script.sh
arch-chroot $DEST_DIR /arch_chroot_script.sh

echo Image filesystem successfully built in $DEST_DIR
echo
echo running ec2strap_ebs_push will help you publish the image.
